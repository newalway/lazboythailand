<?php

namespace ProjectBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
#extends \Doctrine\ORM\EntityRepository

use Symfony\Component\Intl\Locale;

/**
 * FeaturesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeaturesRepository extends NestedTreeRepository
{
    private $qb;

	public function findDataByRootId($root_id=false, $locale=false)
	{
		// $locale = ($locale) ? $locale : Locale::getDefault();

		$this->qb = $this->createQueryBuilder('f');
		$this->qb->select('f', 'ft')
			->join('f.translations', 'ft')
			->orderBy('f.root, f.lft', 'ASC')
			// ->andWhere("ft.locale = '$locale'")
			;

		if($root_id){
			$this->qb->where('f.root = '.$root_id);
		}

		//remove level 0
		$this->qb->andWhere("f.lvl <> 0");

		return $this->qb;
	}

	public function findChildrenByParentId($parent_id, $locale=false)
	{

		$this->qb = $this->createQueryBuilder('f');
		$this->qb->select('f', 'ft')
			->join('f.translations', 'ft')
			->where('f.parent = '.$parent_id)
			->orderBy('f.root, f.lft', 'ASC');

		//remove level 0
		$this->qb->andWhere("f.lvl <> 0");

		return $this->qb;
	}

	public function findAllActiveData($root_id=false,$locale=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		$this->qb = $this->createQueryBuilder('f');
		$this->qb
			->select('f','ft')
			->join('f.translations', 'ft')
			->orderBy('f.root, f.lft', 'ASC')
			->where("ft.locale = '$locale'")
		;
        $this->qb->andWhere($this->qb->expr()->andX(
            $this->qb->expr()->like('f.status', ':status')
        ))
        ->setParameter('status',1);

		if($root_id){
			$this->qb->andWhere('f.root = '.$root_id);
		}
		//remove level 0
		$this->qb->andWhere("f.lvl <> 0");
		return $this->qb;

	}
    public function getActiveDataById($id,$root_id=false,$locale=false)
	{
        $this->qb = $this->findAllActiveData($root_id);

        $this->qb->andWhere($this->qb->expr()->andX(
            $this->qb->expr()->like('f.id', ':id')
        ))
        ->setParameter('id',$id)
        ;
		return $this->qb;
    }
}
