<?php

namespace ProjectBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
#extends \Doctrine\ORM\EntityRepository

use Symfony\Component\Intl\Locale;

/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends NestedTreeRepository
{
	private $qb;

	public function findDataByTitle($title, $root_id=false, $locale=false)
	{
		$this->findDataByRootId($root_id);

		$this->qb->andWhere($this->qb->expr()->orX(
					$this->qb->expr()->like('ct.title', ':query')
				))
		->setParameter('query', '%'.$title.'%');

		return $this->qb;
	}

	public function findDataByRootId($root_id=false, $locale=false, $lvl=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		$this->qb = $this->createQueryBuilder('c');
		$this->qb->select('c', 'ct')
			->leftjoin('c.translations', 'ct', "WITH", "ct.locale=:locale")
			->orderBy('c.root, c.lft', 'ASC')
			->setParameter('locale', $locale);

		if($root_id){
			$this->qb->where('c.root = '.$root_id);
		}

		//remove level 0
		$this->qb->andWhere("c.lvl <> 0");

		//find level
		if($lvl){
			$this->qb->andWhere('c.lvl = '.$lvl);
		}

		if($locale){
			$this->qb->andWhere("ct.locale = '$locale'");
		}

		return $this->qb;
	}

	public function findDataByNodeId($node_id=false, $locale=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		$this->qb = $this->createQueryBuilder('c');
		$this->qb->select('c', 'ct')
			->leftjoin('c.translations', 'ct', "WITH", "ct.locale=:locale")
			->orderBy('c.root, c.lft', 'ASC')
			->setParameter('locale', $locale);

		if($node_id){
			$this->qb->where('c.id = '.$node_id);
		}

		return $this->qb;
	}

	public function findChildrenByParentId($parent_id, $locale=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		$this->qb = $this->createQueryBuilder('c');
		$this->qb->select('c', 'ct')
			->leftjoin('c.translations', 'ct', "WITH", "ct.locale=:locale")
			->where('c.parent = '.$parent_id)
			->orderBy('c.root, c.lft', 'ASC')
			->setParameter('locale', $locale);

		//remove level 0
		$this->qb->andWhere("c.lvl <> 0");

		return $this->qb;
	}

	public function getTree($node, $includeNode=false, $locale=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		$qb = $this->getNodesHierarchyQueryBuilder($node, false, array(), $includeNode);
		$qb->addSelect('ct')
			->leftJoin('node.translations', 'ct', "WITH", "ct.locale=:locale")
			->setParameter('locale', $locale);

		// $qb
		// 	->andWhere('node.status = :status')
		// 	->setParameter('status', 1)
		// 	->andWhere('node.deletedAt IS NULL')
		// ;

		$components = $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
		return $this->buildTreeArray($components);
	}

	public function findDataById($id)
    {
        $this->find($id);
        return $this;
    }
}
