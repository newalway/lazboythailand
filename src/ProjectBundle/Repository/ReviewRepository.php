<?php

namespace ProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Symfony\Component\Intl\Locale;

/**
 * ReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReviewRepository extends \Doctrine\ORM\EntityRepository
{
    private $qb;
    public function findAllData($arr_query_data=false, $locale=false)
    {
        $locale = ($locale) ? $locale : Locale::getDefault();
        $this->qb = $this->createQueryBuilder('r')
                // ->orderBy('s.position', 'ASC')
                ->leftjoin("r.product","p")
                ->leftjoin("r.user","u")
                ->leftjoin("r.reviewRating","rt")
                ->orderBy('r.createdAt', 'DESC');
        // $q = $arr_query_data['q'];
        // if($q){
        //     $qb->where($qb->expr()->orX(
        //         $qb->expr()->like('s.title', ':query'),
        //         $qb->expr()->like('s.address', ':query')
        //     ))
        //     ->setParameter('query', '%'.$q.'%');
        // }
        return $this->qb;
    }

    public function setPublic()
    {
        $this->qb->andWhere('r.status = 1');
    }

    public function findAllActiveData($arr_query_data=false, $locale=false)
    {
        $this->qb = $this->findAllData($arr_query_data, $locale);
        $this->setPublic();
        return $this->qb;
    }
    public function getAllSummaryData($arr_query_data=false, $locale=false,$product_id)
    {
        $this->findAllActiveData($arr_query_data,$locale);
        $this->qb->select("avg(r.ratingScore) as score_avg, count(r.ratingScore) as score_count")
            ->andWhere("p.id = :product_id")
            ->setParameter('product_id', $product_id);

        return $this->qb;
    }

    public function getGroupRatingByProduct($arr_query_data=false, $locale=false,$product_id)
    {
        $this->findAllActiveData($arr_query_data,$locale);
        $this->qb->groupBy("r.ratingScore")
            ->addSelect('COUNT(r.ratingScore) as count_rating')
            ->andWhere("p.id = :product_id")
            ->setParameter('product_id', $product_id);

        return $this->qb;
    }

    public function getSumRatingByProduct($arr_query_data=false, $locale=false,$product_id)
    {
        $this->findAllActiveData($arr_query_data,$locale);
        $this->qb
            ->addSelect('sum(r.ratingScore) as sum_rating')
            ->andWhere("p.id = :product_id")
            ->setParameter('product_id', $product_id);

        return $this->qb;
    }

    public function getAllRatingByProduct($arr_query_data=false, $locale=false,$product_id)
    {
        $this->qb = $this->findAllActiveData($arr_query_data,$locale)
        ->andWhere("p.id = :product_id")
        ->setParameter('product_id', $product_id);
      return $this->qb;
    }

    public function getAllReviewByProduct($arr_query_data=false, $locale=false,$product_id)
    {
        $this->qb =$this->findAllActiveData($arr_query_data,$locale)
            // ->andWhere($this->expr()->andX(
            //     $this->expr()->isNotNull('r.Content'),
            //     $this->expr()->eq('p.id', ':product_id')
            // ))

        ->andWhere("p.id = :product_id")
        ->andWhere("r.content IS NOT NULL")
        ->setParameter('product_id', $product_id);
      return $this->qb;
    }

    public function getReviewByAnonymously($arr_query_data=false, $locale=false,$product_id, $user_session, $ip_address)
    {
        $this->qb =$this->findAllActiveData($arr_query_data,$locale)
        ->andWhere("p.id = :product_id")
        ->setParameter('product_id', $product_id);

        if($user_session){
            $this->qb->andWhere("r.userSession = :user_session")
            ->setParameter('user_session', $user_session);
        }else{
            $this->qb->andWhere("u.ipAddress = :ip_address")
            ->setParameter('r.ip_address', $ip_address);
        }
      return $this->qb;


    }
    public function getReviewByMember($arr_query_data=false, $locale=false,$product_id, $user_id)
    {
        $this->qb =$this->findAllActiveData($arr_query_data,$locale)
                        ->andWhere("p.id = :product_id")
                        ->andWhere("u.id = :user_id")
                        ->setParameter('product_id', $product_id)
                        ->setParameter('user_id', $user_id);


        return $this->qb;
    }
}
