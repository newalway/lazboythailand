<?php

namespace ProjectBundle\Repository;

use ProjectBundle\Entity\ProductOptionCategory;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Intl\Locale;

/**
 * ProductOptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductOptionRepository extends \Doctrine\ORM\EntityRepository
{
	private $qb;

	public function findAllData($arr_query_data=false, $locale=false)
	{
		$locale = ($locale) ? $locale : Locale::getDefault();

		//QueryBuilder Expr
		$this->qb = $this->createQueryBuilder('po')
			->select('po, pot', 'poc', 'poct')
			->leftJoin('po.translations', 'pot')
			->leftJoin('po.productOptionCategory', 'poc')
			->leftJoin('poc.translations', 'poct', "WITH", "poct.locale='$locale'")
			->orderBy('poc.position', 'ASC')
			->addOrderBy('po.position', 'ASC')
			->addOrderBy('po.createdAt', 'DESC');

		//join productOptionCategory
		// $this->qb->addSelect('poc', 'poct')
		// 	->leftJoin('po.productOptionCategory', 'poc')
		// 	->leftJoin('poc.translations', 'poct');
		if(isset($arr_query_data['q']) && $arr_query_data['q']){
			//search from translation
  			$this->qb->where($this->qb->expr()->orX(
	  	      	$this->qb->expr()->like('pot.title', ':query')
	  			// $this->qb->expr()->like('evt.description', ':query')
			))
  			->setParameter('query', '%'.$arr_query_data['q'].'%');
  		}else{

		}

		if(isset($arr_query_data['productOptionCategory']) && $arr_query_data['productOptionCategory']){
			$this->qb->andWhere('poc.id = :product_option_category_id')
				->setParameter('product_option_category_id', $arr_query_data['productOptionCategory']);
		}

		// $this->qb->andWhere("pot.locale = '$locale'");

		return $this->qb;
	}

	public function setClearDefaultOptionValueByCategory(ProductOptionCategory $productOptionCategory)
	{
		$qb = $this->createQueryBuilder('po');
		$qb->update()
		        ->set('po.defaultOption', 0)
				->where('po.productOptionCategory = :productOptionCategory')
		        ->setParameter('productOptionCategory', $productOptionCategory);
		$qb->getQuery()->execute();
	}

	public function findAllActiveData($arr_query_data=false, $locale=false)
    {
		$this->findAllData($arr_query_data, $locale);
        $this->setPublic();

		// $this->qb->select('poc', 'poct')
        //     ->leftjoin('po.productOptionCategory', 'poc', "WITH", 'poc.status = 1')
        //     ->leftjoin('poc.translations', 'poct')
		// 	->addOrderBy('poc.position', 'ASC')
		// 	->addOrderBy('poc.createdAt', 'DESC');

		return $this->qb;
	}

	public function setPublic()
    {
		$this->qb->andWhere('poc.status = 1');
		$this->qb->andWhere('po.status = 1');
    }

	public function findActiveDataById($id, $arr_query_data=false, $locale=false)
    {
		$this->findAllData($arr_query_data, $locale);
		$this->setPublic();
		$this->qb->andWhere('po.id = '.$id);

		return $this->qb;
	}
}
