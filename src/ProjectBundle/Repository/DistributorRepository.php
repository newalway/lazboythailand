<?php

namespace ProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Symfony\Component\Intl\Locale;

/**
 * DistributorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DistributorRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllData($arr_query_data=false)
    {
        $qb = $this->createQueryBuilder('d')
                ->leftJoin('d.translations','dt')
                ->leftJoin('d.distributorCategory','dct')
                ->leftJoin('d.zone','z')
                ->addOrderBy('z.id', 'ASC')
                ->addOrderBy('d.position', 'ASC')
                ->addOrderBy('d.createdAt', 'DESC');
        //$q = $arr_query_data['q'];

        if(isset($arr_query_data['searchBox']) && $arr_query_data['searchBox']){
            $qb->where($qb->expr()->orX(
                $qb->expr()->like('dt.title', ':query')
                //$qb->expr()->like('s.address', ':query')
            ))
            ->setParameter('query', '%'.$arr_query_data['searchBox'].'%');
        }


        if (isset($arr_query_data['distributorCategory']) && $arr_query_data['distributorCategory']){
             $qb->andWhere($qb->expr()->orX(
                $qb->expr()->eq('dct.id', ':distributorCategory')
            ))
            ->setParameter('distributorCategory', $arr_query_data['distributorCategory']);
        }
        if (isset($arr_query_data['zone']) && $arr_query_data['zone']){
             $qb->andWhere($qb->expr()->orX(
                $qb->expr()->eq('z.id', ':zone')
            ))
            ->setParameter('zone', $arr_query_data['zone']);
        }

        return $qb;
    }

    public function findAllActiveData($locale=false)
    {
        $locale = ($locale) ? $locale : Locale::getDefault();

        $qb = $this->createQueryBuilder('d');
        $qb ->leftjoin('d.translations', 'dt')
            ->orderBy('d.position', 'ASC')
            ->addOrderBy('d.createdAt', 'DESC')
            ->andWhere($qb->expr()->andX(
                $qb->expr()->like('d.status', ':status'),
                $qb->expr()->like('dt.locale', ':locale')
            ))
            ->setParameters(array(
                'status' => 1,
                'locale' => $locale
            ))
            ->select('d','dt')
        ;
      return $qb;
    }

    public function findActiveDataById($id)
    {
        $qb = $this->findAllActiveData();
        $qb->andWhere("d.id = '$id'");
        return $qb;
    }
    public function findAllActiveDataByZoneId($locale=false,$id)
    {
        $locale = ($locale) ? $locale : Locale::getDefault();

        $qb = $this->createQueryBuilder('d');
        $qb ->leftjoin('d.translations', 'dt')
            ->innerjoin('d.zone','z')
            ->innerjoin('d.distributorCategory','dct')
            ->orderBy('d.position', 'ASC')
            ->addOrderBy('d.createdAt', 'DESC')
            ->andWhere($qb->expr()->andX(
                $qb->expr()->like('d.status', ':status'),
                $qb->expr()->like('dt.locale', ':locale'),
                $qb->expr()->eq('z.id', ':id')
            ))
            ->setParameters(array(
                'status' => 1,
                'locale' => $locale,
                'id' => $id
            ))
            ->select('d','dt','z','dct')
        ;
      return $qb;
    }

    public function getFastestDistanceByLatLng($lat, $lng, $locale=false)
    {
        $locale = ($locale) ? $locale : Locale::getDefault();

        $qb = $this->createQueryBuilder('d');
        $qb->select('d', 'dt')
            ->leftjoin('d.translations', 'dt')
            ->addSelect("
                ( 6371 *
                    ACOS(
                        COS( RADIANS( :lat ) ) *
                        COS( RADIANS( d.latitude ) ) *
                        COS( RADIANS( d.longitude ) - RADIANS( :lng ) ) +
                        SIN( RADIANS( :lat ) ) *
                        SIN( RADIANS( d.latitude) )
                    )
                )
                AS distance "
            )
            ->where("dt.locale = '$locale'")
            ->andWhere("d.status = 1")
            ->setParameters(array(
                'lat'=> $lat,
                'lng'=> $lng
        ));
        $qb->orderBy('distance', 'ASC');
        #$qb->having('distance <= 5'); //distant 5 kilometer

        // 6371 = kilometer
        // 3959 = mile

        return $qb;
    }



}
